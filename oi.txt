@app.route('/setVerify', methods=['GET'])
def setVerify():
	#: A função setVerify é utilizada para verificar o cadastro do client, após SetCliente
	try:
		idverify = str(request.args['idverify']).strip()
		assert(idverify), 'Id Verify é campo obrigatório'
		jdata = dict({'idverify':idverify})
		jdata = dict(list(DB.Exec(f"CALL `SetVerify`('{dumps(jdata, ensure_ascii=False, default=str)}');"))[0][0])
		assert(int(jdata['id']) in [1,2]), 'Unknown'
		if ( jdata['id'] == 1 ): return(redirect(r'https://beta.mkst.app/login.php', code=302))
	except IndexError: return(dict(service=str(request.path[1:]), status='Failed: IndexError'), 500, headers_ret)
	except AssertionError as e: return(dict(service=str(request.path[1:]), status=f'Failed: {str(e)}'), 500, headers_ret)
	except Exception as e: return(dict(service=str(request.path[1:]), status=f'Failed: {type(e)} {str(e)}'), 500, headers_ret)
	else: return(dict(service=str(request.path[1:]), status='OK', jdata=jdata), 200, headers_ret)
@app.route('/setVerifyTgm', methods=['GET'])
def setVerifyTgm():
	#: A função setVerifyTgm é utilizada para verificar o cadastro do client no Bot Telegram
	try:
		idverify=str(request.args['idverify']).strip()
		assert(idverify), 'Id Verify é campo obrigatório'
		idverify=str(b64decode(idverify.encode('ascii')).decode('ascii')).split(':')
		sql="UPDATE IGNORE `clientes` SET `id_tgm`='{}' WHERE `login`='{}' LIMIT 1; COMMIT; SELECT 1 AS `id`;".format(idverify[1], idverify[0])
		sql=dict(list(DB.Exec(sql))[0][0])
		assert(int(sql['id'])==1), 'Unknown'
		headers=dict(headers_ret, **dict({'Refresh':'3;URL=https://beta.mkst.app/login.php'}))
	except IndexError: return(dict(service=str(request.path[1:]), status='Failed: IndexError'), 500, headers_ret)
	except AssertionError as e: return(dict(service=str(request.path[1:]), status=f'Failed: {str(e)}'), 500, headers_ret)
	except Exception as e: return(dict(service=str(request.path[1:]), status=f'Failed: {type(e)} {str(e)}'), 500, headers_ret)
	else: return('Cadastro realizado com sucesso', 302, headers)
@app.route('/setLostPwd', methods=['POST'])


___return(redirect(r'https://google.com', code=302))



curl -sfkLm10 --retry 3 --retry-delay 3
